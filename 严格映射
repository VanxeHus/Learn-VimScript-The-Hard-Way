严格映射
做好心理准备，因为现在开始，事情会变得有些棘手。

到目前为止，我们已经学会用map，nmap，vmap和imap命令创建按键映射来为我们节省时间。但是，这些命令都存在一个缺点，通过下面的命令我们来了解一下:

:nmap - dd
:nmap \ -

现在你可以尝试按下\键(在正常模式下)。考虑一下会发生什么？

当你按下\键时，Vim看见了你设置的映射，然后自言自语说：“根据映射，我应该运行-键”。但是，我们已经把-键映射到了其他按键上了！当然，Vim也发现了，然后又说：“哦，根据这些映射，我现在该运行dd命令”，于是Vim删除了当前行文本。

当你用这些*map命令设置按键映射时，Vim会综合考虑你设置的所有映射，然后再进行相关的操作。这初听起来好像还不错，但是，实际上这完全是映射的噩梦！让我们讨论一下原因，但是首先，我们要移除这些映射。运行下面命令:

:nunmap -
:nunmap \

递归
运行命令:

:nmap dd 0<esc>jddk

第一眼，我们也许会以为这个命令会把dd映射为如下的功能:
	首先，在当前行的上面插入一行空行
	然后，退出插入模式
	接着，光标下移一行
	再者，删除光标所在行
	最后，把光标移回刚创建的空行

简单地来讲，这个映射会把dd映射为功能“清空当前行内容”。去尝试一下吧。

当你按下dd键后，Vim看起来像是死机了。你可以按下Ctrl+c键，打断当前操作，从而让Vim又可以响应我们的操作。但是，你会发现，你打开的文件中，多出了许许多多的空行！为什么？

实际上，这个映射正在递归！当你按下dd，Vim会进行这如下的思考：
	dd被映射了，所以映射的命令如下：
		在当前行上面插入一行空行
		退出插入模式
		光标下移一行
		dd被映射了，所以映射的命令如下：
			在当前行上面插入一航空行
			退出插入模式
			光标下移一行
			......

这个映射可以这样无穷无尽地运行下去！让我们把这个糟糕的命令去除:

:nunmap dd

弊端
这些*map命令的一个缺点就是可能造成递归。另一个缺点则在于，如果你下载的Vim插件改变了这些映射所依赖的按键，那么这些映射的功能也就被相应地改变了。

当你下载一个新的Vim插件时，你很有可能并不会记住和使用这个插件创建的所有按键映射。即使你真的会记住和使用这些映射，你也需要检查自己的~/.vimrc文件，确保你本来设置的按键映射没有被插件所干扰。

这些原因导致了下载插件，这一本来简单、便捷的事情，变得复杂、乏味并且容易出错。因此，有一个更为安全的按键映射方法。

非递归映射
Vim提供了另外一系列的映射命令，让Vim在执行映射命令时，不会再考虑其他映射。运行如下命令:

:nmap x dd
:nnoremap \ x

现在，让我们按下\键，看看这次会发生什么。

当你按下\键，Vim会忽略x键被设置的映射，会执行x键没被映射前的功能。因此，Vim会删除当前光标所指的一个字符，而不是一行文本。

每个*map命令都有一个对应的*noremap命令，用来屏蔽其他映射，比如:noremap、nnoremap、vnoremap和inoremap。

那我们什么时候该使用这些非递归映射命令，而什么时候该使用那些递归映射命令呢？

答案是，能用非递归映射命令就别用递归映射命令！

对的，你没看错，就是尽量全部映射都用非递归映射命令实现！

使用简单赤裸的*map命令，会让你在下载新插件或添加新映射的过程中，增加很多难以理解、怪异的问题。而通过在设置的过程中，多输入几个额外的字符，我们可以尽量避开这些问题！

练习
把所有你已经在~/.vimrc文件中设置的按键映射，都用相应的非递归映射命令替换。

阅读文档:help unmap
