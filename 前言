前言
程序员把想法塑造成文本.

然后这些文本蜕化为二进制的数字，而这些二进制的数字又与其他二进制的数字相互碰撞，最终一件事情就完成了。

作为一名程序猿，我们用文本编辑器来表达我们脑海中的想法，并且创造了一段又一段我们称为”程序“的文本。以程序猿为职业的人，会花费无数个日日夜夜与文本编辑器互动，在这互动的过程中，他们做了如下的工作：

	把脑海中初始程序代码通过文本编辑器表达出来。
	检查初始代码中的错误。
	优化重构代码。
	整理记录代码，写出代码文档。
	与其他程序猿交流讨论这些代码。

Vim是一个高度封装，功能十分强大的文本编辑器，但是在你根据你的工作、习惯、手指等因素花费一定时间对它进行定制之前，它都不会显现出它真正的闪光点。这本书会向你介绍用于定制Vim的主要程序语言Vimscript。在读完本书后，你将能够把Vim塑造成一个符合你编辑需要以及提高你编辑效率的文本编辑器。

严格来讲，在这个过程中，我还会提到一些并不是与Vimscript相关，但是与提高学习效率相关的内容。另外，如果你一天到晚都在捣鼓编辑器而不是工作的话，Vimscript也不能给你很大的帮助，所以在定制和工作间找到平衡也十分重要。

这本书的风格与其他关于程序语言的书不同，它会指导你输入命令，观察命令的执行，而不是向你展示Vimscript如何工作。

有时候，这本书在阐述解决问题的正确方法前，会把你引导向死胡同，这是其他很多书所不会做的，或者仅仅是在给出解决方案后才提及比较棘手的注意事项。但是，这往往不是现实中问题如何出现的。通常，在现实中，你会写出一些Vimscript的代码片段，然后运行发现这门语言的一些奇怪的特性，而这些特性也是你需要理解和学习的。经历而不是略过这样一个过程，我希望，你能够发现自身在Vimscript这门语言上的一些知识盲区时，能够习惯于定位问题根源并解决它。熟能生巧！

这本书的每一章都只关注一个主题。虽然很短，但是都充满着知识，所以，不要跳过它。如果你想充分利用这本书，你需要实实在在地去运行书中的命令。你或许已经是一名经验丰富的程序猿，能够熟练地阅读代码并且很快地理解它。即使这样，也没什么关系，学习Vim和Vimscript是一种与学习其他程序语言不同的经历。

你需要运行所有的命令！！
你需要完成所有的练习！！

这样做有两个原因。首先，Vimscript非常古老，有着许许多多奇怪、奇异的特性。一个简单的配置选项，能够改变整个语言的工作方式。通过运行课程中的所有命令和完成所有练习，你能够学会用更简单的命令，让你在定制Vim过程中，更容易定位和修复你发现的问题。

第二，Vimscript和Vim其实是一体的，在Vim中保存文件，你会键入:write(或者:w简写)，然后按下回车。在Vimscript中保存文件，你会使用write。许多你学习到的Vimscript命令，在你日常使用Vim的时候，也能使用。但这只会在已经形成肌肉记忆的情况下发生，而简单地阅读并不能帮助形成肌肉记忆。

我希望这本书对你有帮助。这本书并不打算成为Vimscript最全面的指南，这本书希望成为的是，让你习惯于一门定制Vim的语言，让你能够基于此开发出Vim的相关插件，让你能够阅读其他程序员写的插件代码（通常使用:help）以及让你能够避开Vimscript的一些陷阱。

祝你好运！！
